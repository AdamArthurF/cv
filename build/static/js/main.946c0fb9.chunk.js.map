{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","Fragment","async","src","className","data-project-id","Component","Navbar","propTypes","light","PropTypes","bool","dark","fixed","string","color","role","expand","oneOfType","tag","func","NavbarBrand","NavbarText","Container","fluid","Row","noGutters","form","xs","number","sm","md","lg","xl","stringOrNumberProp","columnProps","shape","size","order","offset","Col","widths","array","Media","body","bottom","children","node","heading","left","list","middle","object","right","top","Button","active","block","disabled","outline","$$typeof","symbol","render","arrayOf","innerRef","onClick","cssModule","close","defaultProps","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.946c0fb9.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n// import {Route, Switch} from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\n// import AppNav from \"./component/AppNav\";\r\n// import AppHeader from \"./component/AppHeader\";\r\n// import AppMain from \"./component/AppMain\";\r\n// import AppFooter from \"./component/AppFooter\";\r\nimport {Button, Col, Container, Media, Navbar, NavbarBrand, NavbarText, Row} from \"reactstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './sass/style.css';\r\n\r\nexport default class App extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment> \r\n                <script async src=\"https://e.prezicdn.net/v1/design.js\"></script>\r\n                <div className=\"prezi-design-embed\" data-project-id=\"ywuaxknv2iqy\"></div>   \r\n                {/* <AppNav/>\r\n                <AppHeader/>\r\n                <AppMain/>\r\n                <AppFooter/> */}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n// export default class AppRouter extends Component {\r\n//     render() {\r\n//         return (\r\n//             <React.Fragment>\r\n//                 <Switch>\r\n//                     <Route path=\"/\" component={App} exact={true}/>\r\n//                 </Switch>\r\n//             </React.Fragment>\r\n//         )\r\n//     }\r\n// }\r\n\r\nNavbar.propTypes = {\r\n    light: PropTypes.bool,\r\n    dark: PropTypes.bool,\r\n    fixed: PropTypes.string,\r\n    color: PropTypes.string,\r\n    role: PropTypes.string,\r\n    expand: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\r\n    tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\r\n    // pass in custom element to use\r\n}\r\n\r\nNavbarBrand.propTypes = {\r\n    tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\r\n    // pass in custom element to use\r\n}\r\n\r\nNavbarText.propTypes = {\r\n    tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\r\n    // pass in custom element to use\r\n}\r\n\r\nContainer.propTypes = {\r\n    fluid: PropTypes.oneOfType([PropTypes.bool, PropTypes.string])\r\n    // applies .container-fluid class if bool or .container-{breakpoint} if string\r\n}\r\n\r\nRow.propTypes = {\r\n    noGutters: PropTypes.bool,\r\n    // see https://reactstrap.github.io/components/form Form Grid with Form Row\r\n    form: PropTypes.bool,\r\n    xs: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    sm: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    md: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    lg: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    xl: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\r\n}\r\n\r\nconst stringOrNumberProp = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\r\nconst columnProps = PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.bool,\r\n    PropTypes.shape({\r\n        size: PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string]),\r\n        // example size values:\r\n        // 12 || \"12\" => col-12 or col-`width`-12\r\n        // auto => col-auto or col-`width`-auto\r\n        // true => col or col-`width`\r\n        order: stringOrNumberProp,\r\n        offset: stringOrNumberProp\r\n    })\r\n]);\r\n\r\nCol.propTypes = {\r\n    xs: columnProps,\r\n    sm: columnProps,\r\n    md: columnProps,\r\n    lg: columnProps,\r\n    xl: columnProps,\r\n    // override the predefined width (the ones above) with your own custom widths.\r\n    // see https://github.com/reactstrap/reactstrap/issues/297#issuecomment-273556116\r\n    widths: PropTypes.array,\r\n}\r\n\r\nMedia.propTypes = {\r\n    body: PropTypes.bool,\r\n    bottom: PropTypes.bool,\r\n    children: PropTypes.node,\r\n    className: PropTypes.string,\r\n    heading: PropTypes.bool,\r\n    left: PropTypes.bool,\r\n    list: PropTypes.bool,\r\n    middle: PropTypes.bool,\r\n    object: PropTypes.bool,\r\n    right: PropTypes.bool,\r\n    tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n    top: PropTypes.bool,\r\n};\r\n\r\nButton.propTypes = {\r\n    active: PropTypes.bool,\r\n    'aria-label': PropTypes.string,\r\n    block: PropTypes.bool,\r\n    color: PropTypes.string, // default: 'secondary'\r\n    disabled: PropTypes.bool,\r\n    outline: PropTypes.bool,\r\n\r\n    // Pass in a Component to override default button element\r\n    // example: react-router Link\r\n    // default: 'button'\r\n    tag: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.string,\r\n        PropTypes.shape({ $$typeof: PropTypes.symbol, render: PropTypes.func }),\r\n        PropTypes.arrayOf(PropTypes.oneOfType([\r\n            PropTypes.func,\r\n            PropTypes.string,\r\n            PropTypes.shape({ $$typeof: PropTypes.symbol, render: PropTypes.func }),\r\n        ]))\r\n    ]),\r\n\r\n    // ref will only get you a reference to the Button component, use innerRef to get a reference to the DOM element (for things like focus management).\r\n    innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\r\n\r\n    onClick: PropTypes.func,\r\n    size: PropTypes.string,\r\n    children: PropTypes.node,\r\n    className: PropTypes.string,\r\n    cssModule: PropTypes.object,\r\n\r\n    // use close prop for BS4 close icon utility\r\n    close: PropTypes.bool,\r\n}\r\n\r\nButton.defaultProps = {\r\n    color: 'secondary',\r\n    tag: 'button',\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// import {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        {/* <BrowserRouter basename={process.env.PUBLIC_URL}> */}\r\n          <App />\r\n        {/* </BrowserRouter> */}\r\n    </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}